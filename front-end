
##### Here are some of the most commonly used tools and packages in Front-End development:

1. **Build Tools**

- Webpack: A popular module bundler that combines and optimizes your code, assets, and dependencies.
- Parcel: A zero-configuration bundler that promises a simpler setup and faster build times.
- gulp: 
- grunt:

2. **Transpilers**

- Babel: Converts modern JavaScript syntax (ES6+) to a format that can be understood by older browsers.
- TypeScript: A typed superset of JavaScript that adds optional static typing to your code, improving maintainability and catching potential errors early.

3. **State Management**

- Redux: A predictable state container for JavaScript applications. It helps manage global application state in a centralized and organized way.
- Context API: A built-in feature of React that provides a way to pass data through the component tree without having to pass props manually at every level.
- Zustand: A lightweight and simple state management solution that offers a more concise API compared to Redux.

4. **Testing**

- Jest: A JavaScript testing framework that comes with a rich feature set for unit testing, snapshot testing, and more.
- React Testing Library: A library that helps you write tests that are focused on user interactions and the behavior of your components.
- Enzyme: A JavaScript testing utility for React that allows you to mount, render, and manipulate React components for testing purposes.

5. **Styling**

- CSS Modules: A way to scope CSS classes to specific components, preventing naming conflicts and improving maintainability.
- Styled Components: A library that allows you to write CSS directly within your JavaScript components, making it easier to style React components.
- Sass/Less: CSS preprocessors that offer features like variables, nesting, and mixins to enhance your CSS workflow.

6. **Linting and Formatting**

- ESLint: A linter that helps enforce coding standards and catch potential errors in your JavaScript code.
- Prettier: A code formatter that automatically formats your code according to predefined style rules.

7. **Additional Tools**

- Create React App: A tool that sets up a new React project with sensible defaults, including Webpack, Babel, and other necessary tools.
- Storybook: A development environment for building and testing UI components in isolation.
- React Router: A library for managing routing in React applications.

8. **Framework/library**

- Gatsby: had include webpack and babel -> install these if need custom
- antd: là thư việc UI client cần custom nhiều, so với bootstrap
- bootstrap : là thư viện UI client hỗ trợ nhiều UI, dùng cho design cố định



##### gatsby is framework build on react, react is library. So when use gatsby is action with react. gatsby new not include node module
gatsby là framework đã tích hợp sẵn
1. Babel: convert js phiên bản mới về phiên bản cũ để sử dụng những browser cũ. Config trong file gatsby-config.js
2. Webpack: Đóng gói, tối ưu code hiện tại trước khi sử dụng. Config trong file gatsby-config.js
3. TypeScript: Tool chuẩn hóa coding convention cho team dev. Đã tích hợp trong gatsby
4. ESLint: Báo lỗi để chuẩn hóa coding convention. Config trong .eslintrc.js
5. Prettier: Để format code. Config trong file .prettierrc



##### react context và redux
- Giống: Đều là giải pháp xử lý get/set state cục bộ từ bất kỳ component con nào thay vì truyền props qua nhiều cấp từ component cha
- Khác:
	+ react context: Là tính năng của react mới, sử dụng cho các ứng dụng đơn giản,
		* Ứng dụng: cho tính năng đơn giản theme, languages, notifications. Ít thay đổi 
		* Tối ưu: Dùng react.memo or useMemo tránh rerender Khi state ko thay đổi, limit use in component child deep, Tránh dùng nhiều state quản lý mỗi context vì khi state
		của context thay đổi sẽ rerender hết lại các thành phần phụ thuộc, nên dùng các component con có level gần global
	+ redux: là thư viện, xử dụng có ứng dụng phức tạp. 
		* Ứng dụng: cho tương tác state phức tạp, linh hoạt, flow rõ ràng, tránh state phân tán khó follow
		Cần tính năng travel time, middleware, xử lý bất đồng bộ thay đổi nhiều component, mở rộng với redux-saga



##### useState
	- Quản lý state của 1 component


	
##### useReducer
	- Thay thế cho useState khi cần quản lý state phức tạp hơn với nhiều hành động.
	
	

##### useContext
	- Kết hợp với useState hoặc useReducer để chia sẻ state giữa các component trong cây component.
	
	
##### useMemo, useCallback
	- Tối ưu hóa việc tính toán và sử dụng hàm, tránh việc re-render không cần thiết.

	
##### content file .prettierrc format es6
{
    "printWidth": 80,
    "tabWidth": 2,
    "semi": true,
    "singleQuote": true,
    "jsxSingleQuote": true,
    "trailingComma": "es5",
    "bracketSpacing": true,
    "bracketSameLine": true,
    "jsxBracketSameLine": true,
    "arrowParens": "always",
    "requirePragma": false,
    "insertPragma": false,
    "proseWrap": "preserve",
    "endOfLine": "lf",
    "useTabs": false,
    "quoteProps": "as-needed"
}

##### tip&trick
npm install --save-dev {name_dependencies}
**reason :** it's only required for the development process, like building, testing, or linting, and not necessary for the final deployed application
	
1. TypeScript
- Development Tool: TypeScript is primarily a tool for improving code quality and catching errors during development. It's not essential for the runtime execution of your application.
- Version Control: By saving it as a development dependency, you ensure that anyone working on the project will have the same TypeScript version, reducing potential compatibility issues.
- Deployment Optimization: Excluding development dependencies from your production deployment can reduce the size of your application and improve performance.

2. prettier
- Like typescript

config syntax build, deloy, test in "scripts" file packages.json 

syntax cài lại package
	rm -r package-lock.json node_modules .cache
	
3. check path @
 vào file config check xem @ import bắt đầu từ đâu(path), nếu cần thì setting lại