##### Dynamic website multiple language
- Solution
	+ Use multiple file config define variable common with same key but the value is value has translator for fer file
	+ Design DB store data for multiple language, create new table with all column is common and multiple sub table with
	columns need value translator (eg: fields price, discount, phone number,... is common and fields name_product, ... need translator)
	+ Use api the third to transactor payload before to CRUD data for per table language eg: google translate api
	+ when use the third api to translator payload before update need handle when change data choose would use translator update other language
	+ When admin create/update/delete a field will create a record in table history
	ex: 
		* Create a record will make full data for per column for history
		* Update a record will make data for this fields update in history
		* Delete a record will handle same create new record



##### Ideal phân quyền
	+ Mục tiêu: Phần quyền account có quyền access api, table và row id của table đó
	+ Design DB
		- Table store data quản lý truy cập api (tables X)
			1. admin: Lưu trữ thông tin account
			2. admin_role: lưu trữ data trung gian admin và role, ví dụ 1 admin có nhiều role và ngược lại
			3. role: Lưu trữ role, mục đích để xác thực quyền truy cập của admin account dựa theo role
			4. api_feature: Lưu trữ data trung gian role, feature, api. Vd 1 role có nhiểu feature, api và 1 feature hoặc 1 api tương tự
			5. feature: lưu trữ data feature. vd feature category, product,...
			6. api: Lưu trữ info api
			
		- Table store data quản lý truy cập table và record (table Y)
			1. admin:....
			2. admin_department: Lưu trữ data trung gian admin và departmet. vd 1 admin có nhiều department và ngược lại
			3. department: Lưu trữ data phòng ban. Mục đích xác thực phòng ban có quyền quản lý đến table và record nào
			4. department_management: Lưu chữ data trung gian department và policy. vd 1 department có nhiều policy và ngược lại
			5. policy_department: Lưu chữ data table name và row id
		
	+ Nguyên lý hoạt động:
		1. Ban đầu tạo bash insert data account root. Có toàn quyền truy cập data hiện tại
		2. Mỗi khi insert data feature, api, policy_department. Insert data set quyền cho account hiện tại đang thao tác và trigger insert data tất cả account root
		3. Tạo view sql :
			3.1 admin_permission_view: Table view select api của account sent request. Check account sent request có được phép access api đang sent request ko
			3.2 admin_policy_view: Table view select table name và row id của account sent request. Check account có được thao tác với table và row id đó ko
			select, update, delete table thao tác inner join với admin_policy_view
		
		
		
		sửa table t_api_feature column api_id, feature_id cho phép null -> khi insert table api hoặc feature sẽ trigger insert data vào table này với role root 

##### Chức năng login, remember me, logout dùng session và cookie
	+ Browser gửi thông tin login (username, pass, remember me) lên server
	+ Server xác minh account (check tồn tại trong DB).
		- Nếu fail thì throw về exception
		- Nếu đúng: Tạo 1 session lưu trữ VD: id = unqID, user_id=1,.. vào (file, DB, cache,...)
		và trả về response set cookie với value là session_id. Cả hai có cùng time life ngắn VD: 30p 
			* Nếu có remember me: Thì tạo 1 uniqueID lưu trữ ở (file, DB, cache,...) và trả về response set cookie
			có cùng time life vd:10 ngày
	+ Mỗi request tiếp theo sẽ đính kèm 2 cookie session_id và remember token lên server
	+ Server check cookie session_id có tồn tại session trong (file, DB, cache,...) hay không
		- Nếu ko, thì check trong request có cookie remember me token không
			* Nếu ko thì server throw exception, client redirect page login 
			* Nếu Có remember token, check có hợp lệ hay không
				/ ko thì server throw exception. Client redirect page login
				/ Hợp lệ thì refresh lại thời gian remember token lưu trữ, tạo 1 session mới. Trả về client set cookie session_id mới và
				remember token nhưng time life mới refresh 
		- Nếu có thì tiếp tục xử lý
	+ Khi session hết hạn. Lúc này session và cookie đã bị xóa, những request tiếp theo
	client gủi sẽ không có cookie session_id hoặc server check không tồn tại session. Server sẽ check trong request gửi
	lên có remember token hay không
		- Không có remember token trong request thì throw exception. Client redirect qua page login
		- Có remember token, check có hợp lệ hay không
			* ko thì server throw exception. Client redirect page login
			* Hợp lệ thì refresh lại thời gian remember token lưu trữ, tạo 1 session mới. Trả về client set cookie session_id mới và
			remember token nhưng time life mới refresh 
	+ Khi user client call api logout: server sẽ xóa lưu trữ session và remember token, trả về kết quả thành công.
	Server trả về response set cookie với express trong quá khứ để làm cookie hết hạn và tự động xóa cookie ở phía client


##### Redis: Tương tự như DB thông thường, nhưng lưu trữ dạng cache hay data memory (lưu bằng ram, mất data khi ngắt kết nối, sập server), lưu data mang giá trị tạm thời,
không như DB thông thường lưu ở disk -> không mất data khi ngắt kết nối. Có khả năng truy xuất data nhanh. Lưu chữ data dạng key-value pair
	key: Là path để truy vấn data eg: user:1, xyz:abc:1,.. trong đó ký tự : như là / path tới folder 
	Value: Có nhiều dạng data type như : string, hash, list,...
	Cách thức sử dụng:
	+ Step 1: Sử dụng laragon app hỗ trợ tạo server web, config tạo server redis, dùng tool UI là Redis Insight connect với server redis để quản lý data
	+ Step 2: Sau khi có server redis, để dùng redis trong PHP cần cài extension Predis or PhpRedis. Mực đích để php có thể comunicate với server redis
	Nó giống với extension pdo_pgsql để php có thể comunicate với DB postgresql vậy
	+ Step 3: install via composer: composer require predis/predis
	+ Step 4: setting REDIS_CLIENT=predis in .env
	+ Step 5: Trong các class cần thao tác với redis cần use Illuminate\Support\Facades\Redis;
	+ Step 6: CRUD redis sử dụng data type là hashes (loại này có value dạng json, giống như table trong DB thông thường)
		redis::hset('key', 'value') : set 1 value
		redis::hmset('key', ['name'=>'abc', 'email'=>'email@email.com']): Set multiple field and value of a value
		redis::hget('key', 'field'): get a value by key and field name
		redis::hmget('key', ['name', 'email']): get name and email by key
		...


	
##### Middleware custom: là 1 phần mềm trung gian, có chức năng tiền|hậu xử lý request. VD chức năng xác thực 1 request gửi đến có được quyền truy cập hay không
	+ Step 1: Create file middleware handle request with command line => php artisan make:middleware AdminMiddleware
	+ Step 2: (MAYBE) Regsiter middleware in bootstrap/app.php function middleware and alias name
	+ Step 3: Set middleware for router need use eg: Route::middleware(AdminMiddleware::class)->get('action', [controller::class, 'name']);



##### Xác thực trong laravel sử dụng Auth::class, class này có nhiều phương thức liên quan đến xác thực (xác thực login, get info user đã xác thực, tạo token,...)
Auth::class dựa vào config trong config/auth.php để biết được xác thực dựa trên data từ model (table) nào 
	+ Method Auth::attempt(): Là cơ chế xác thực của laravel. Nhận tham số credentials và tiến hành đối chiếu với data trong db để xác thực
		- Cách thức hoạt động
			* Step 1: Nhận tham số là một array dạng key-value
			(key-value đó chính là column name và value của table trong DB. Thường thì fill key user_name hoặc email và password của 1 table)
			* Step 2: Tự động truy xuất data dựa trên config, mặc định thực hiện từ default->guard->provider->model trong file config/auth.php để xác định table cần truy xuất.
			Nếu ko sử dụng setting default thì cần tạo guard Eg: adminAuth
			Dựa vào config guard->provider->model trong file config/auth.php để xác định table cần truy xuất
			Khi thao tác Auth::class với guard đã custom thì syntax là Auth::guard('adminAuth') ví dụ xác thực login: Auth::guard('adminAuth')->attempt()
			* Step 3: Sau khi truy vấn có data, tiến hành so sánh hash password
			* Step 4: Trả về kết quả. Nếu thất bại trả về false. Nếu thành công Auth::guard('adminAuth')->user() sẽ trả về model của user


##### Clear cache laravel
	+ php artisan config:cache
	+ php artisan config:clear
	+ php artisan cache:clear
	
